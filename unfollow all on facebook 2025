const delay = ms => new Promise(res => setTimeout(res, ms));

async function waitForXPath(xpath, timeout = 3000) {
  const interval = 200;
  const maxAttempts = timeout / interval;
  let attempts = 0;

  while (attempts < maxAttempts) {
    const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    if (result && result.offsetParent !== null) return result;

    await delay(interval);
    attempts++;
  }
  return null;
}

const containerSelector = '.x78zum5.x1q0g3np.x1a02dak.x1qughib';
const dotSelector = '.x1b0d499.xep6ejk';

async function clickAndUnfollow() {
  let total = 0;

  while (true) {
    const container = document.querySelector(containerSelector);
    if (!container) {
      console.log("‚ùå Container not found.");
      break;
    }

    const buttons = Array.from(container.querySelectorAll(dotSelector)).filter(btn => !btn.dataset.clicked);

    if (buttons.length === 0) {
      console.log("‚úÖ Done. No more buttons.");
      break;
    }

    for (const btn of buttons) {
      btn.dataset.clicked = "true";
      btn.click();
      await delay(1000);

      // Try different versions of the unfollow label (case-insensitive)
      const unfollowXpath = "//span[contains(translate(text(), 'UNFOLLOW', 'unfollow'), 'unfollow')]";
      const unfollowBtn = await waitForXPath(unfollowXpath, 3000);

      if (unfollowBtn) {
        unfollowBtn.click();
        total++;
        console.log(`üö´ Unfollowed ${total}`);
        await delay(1500); // Wait for any animations/dialogs
      } else {
        console.log("‚ö†Ô∏è Could not find unfollow button.");
      }

      await delay(500);
    }

    // Scroll to load more
    window.scrollBy(0, 300);
    await delay(1000);
  }

  console.log(`‚úÖ Finished. Total unfollowed: ${total}`);
}

clickAndUnfollow();
